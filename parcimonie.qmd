# Méthodes de parcimonie

Contrairement aux méthodes par distance, les méthodes de parcimonie ne construisent pas un arbre pas à pas mais recherchent le ou les arbre optimaux parmi l'ensemble des arbres possibles. Le critère d'évaluation des arbres est celui de [maximum de parcimonie](https://fr.wikipedia.org/wiki/Maximum_de_parcimonie): l'arbre préféré est celui qui suppose le moins de changements. Autrement dit, on suppose qu'un changement partagé s'est a priori produit dans l'ancêtre commun plutôt que de manière indépendante dans des langues différentes. Les méthodes de parcimonie cherchent donc à minimiser les homoplasies ou innovations parallèles.

Les méthodes de parcimonie sont plus complexes que celles par distance, mais elles restent néanmoins beaucoup plus simples que les méthodes probabilistes. Si elles reposent sur peu de suppositions et ont une solide base épistémologique, ces méthodes posent des problèmes statistiques et peuvent donner des résultats faux dans [certaines conditions](https://fr.wikipedia.org/wiki/Attraction_des_longues_branches).

Commençons par importer de nouveau la matrice de traits à états multiples que nous avions sauvegardée [précédemment](import.qmd#lst:save).

```{r}
library(tidyverse)
library(phangorn)
library(TreeTools)
lx_phy <- ReadAsPhyDat("lx_phy_multi.nex")
```

## Parcimonie générale

Parmi les différentes variantes de parcimonie, la plus simple autorise tous les changements sans restriction et les traite à égalité sans pondération, orientation, ou ordre. Dans le cas d'une matrice de traits binaires, les changements `0` > `1` et `1` > `0` sont ainsi traités de manière identique, et il n'est pas nécessaire de connaitre l'état ancestral de chaque trait et si un changement constitue une innovation ou une réversion, ce qui implique que le résultat est un arbre non enraciné.

:::{.column-margin}
::: callout-caution
## À faire
Inclure les autres types de parcimonie.
:::
:::

Jusqu'à une dizaine de taxons, il est possible d'utiliser l'algorithme *Branch and Bound* qui garantit de trouver la solution optimale. Le résultat est un objet `multiPhylo` pouvant contenir plusieurs arbres, bien qu'ici il n'y en ai qu'un seul.

:::{.column-margin}
::: callout-caution
## À faire
Vérifier le traitement des données manquantes et celui des polymorphismes pour les données à états multiples.
:::
:::

```{r}
lx_bab <- bab(lx_phy)
lx_bab[[1]]
plot(lx_bab[[1]], "unrooted")
```

Il est nécessaire de calculer explicitement la longueur des différentes branches. La fonction `acctran()` permet de calculer la longueur par la méthode de transformation accélérée qui assigne les changements le plus haut possible dans l'arbre et favorise l'interprétation des homoplasies comme des réversions.

```{r}
lx_bab <- acctran(lx_bab, lx_phy)
lx_bab[[1]]
plot(lx_bab[[1]], "unrooted")
```

On peut alors sauvegarder les résultats (arbres avec longueurs de branches) dans un fichier au [format Newick](https://fr.wikipedia.org/wiki/Newick).

```{r}
write.tree(lx_bab, "lx_bab.tree")
```

Au-delà d'une dizaine de taxons, il est nécessaire d'utiliser une méthode heuristique comme le *Parsimony Ratchet*. Ici, la méthode retourne un seul et unique arbre qui diffère de ceux obtenus par la méthode précédente.

```{r}
#| message: false
#| results: hide
lx_pratchet <- pratchet(lx_phy)
lx_pratchet <- acctran(lx_pratchet, lx_phy)
write.tree(lx_pratchet, "lx_pratchet.tree")
```

```{r}
plot(lx_pratchet, "unrooted")
```
