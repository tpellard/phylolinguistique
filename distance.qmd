# Méthodes par distance

Les méthodes par distance sont simples à comprendre et à implémenter car elles reposent en général sur un algorithme qui ne compare pas les arbres possibles mais construit un arbre unique.

Toutefois, elles ont plusieurs faiblesses qui font qu'elles sont d'un usage limité aujourd'hui:

  * elles ne distinguent pas les innovations communes (synapomorphies) des rétentions communes (symplésiomorphies) et il y a donc une perte d'information cruciale;
  * elles peuvent grouper ensemble de manière erronée des langues conservatrices qui ont subi peu de changements;
  * les langues qui ont subi de nombreuses innovations originales (autapomorphies) peuvent se retrouver artificiellement rejetées sur des branches extérieures.
  
Les méthodes par distance ne peuvent donc pas être recommandées pour l'analyse phylogénétique.

## Calcul des distances

Commençons par importer de nouveau la matrice de traits à états multiples que nous avions sauvegardée [précédemment](import.qmd#lst:save). Calculer la distance sur les données binarisées pourrait biaiser les calculs en donnant plus de poids aux caractères ayant un plus grand nombre d'états possibles.

```{r}
library(tidyverse)
library(phangorn)
library(TreeTools)
lx_phy <- ReadAsPhyDat("lx_phy_multi.nex")
```

Il est trivial de calculer la distance observée, ou *p*-distance, sur une telle matrice. Il suffit de calculer pour chaque paire de langues le rapport entre nombre de caractères différents et le nombre de caractères total avec la fonction `Hamming()` qui prend en charge les données manquantes et les polymorphismes.

```{r}
lx_dist <- Hamming(lx_phy)
```

La diagonale des distances de chaque langue avec elle-même est bien sûr 0, et la matrice de distance est symétrique, on peut donc se passer d'afficher l'un des deux triangles.

```{r}
#| code-fold: true
lx_dist_m <- as.matrix(lx_dist)
lx_dist_m[upper.tri(lx_dist_m)] <- NA
options(knitr.kable.NA = "")
knitr::kable(lx_dist_m, digits = 2)
```

On peut alternativement afficher la matrice des similitudes en retranchant les distances de 1, voir des pourcentages en multipliant le résultat par 100. On obtient alors une matrice semblable à ce qu'on voit en lexicostatistique.

```{r}
lx_sim_m <- (1 - as.matrix(lx_dist)) * 100
```

```{r}
#| code-fold: true
lx_sim_m[upper.tri(lx_sim_m)] <- NA
options(knitr.kable.NA = "")
knitr::kable(lx_sim_m, digits = 2)
```

## UPGMA {#sec-upgma}

L'algorithme de classification [UPGMA (Unweighted pair group method with arithmetic mean)](https://fr.wikipedia.org/wiki/Unweighted_pair_group_method_with_arithmetic_mean) est le plus basique et le moins bon pour les classifications génétiques. Cette méthode présuppose notamment une [«horloge moléculaire»](https://fr.wikipedia.org/wiki/Horloge_mol%C3%A9culaire), c'est-à-dire que la vitesse de changement était constante, ce qui est faux en biologie comme en linguistique. Le résultat est un arbre dit ultramétrique où toutes les langues sont alignées au lieu d'être placées en fonction du nombre de changements avec des branches de longueur variées.

Néanmoins cette méthode est simplissime: on groupe les taxons les plus proches ensemble, et la distance du groupe obtenu aux taxons restants est recalculée en faisant la moyenne des distances des éléments groupés, et on recommence jusqu'à n'avoir plus que deux groupes.

```{r}
lx_upgma <- upgma(lx_dist)
lx_upgma
```

On peut alors sauvegarder les résultats dans un fichier au [format Newick](https://fr.wikipedia.org/wiki/Newick).

```{r}
write.tree(lx_upgma, "lx_upgma.tree")
```

On obtient un arbre unique enraciné qu'on peut facilement visualiser.

```{r}
plot(lx_upgma)
```

## Neighbour joining

La méthode de [neighbour joining](https://fr.wikipedia.org/wiki/Neighbour_joining) est plus sophistiquée que celle de UPGMA mais reste néanmoins simple. Elle s'en distingue par la prise en compte dans l'algorithme de la distance entre toutes les paires de taxons, et non seulement entre les paires les plus proches. Elle produit un arbre non enraciné et non ultramétrique.

```{r}
lx_nj <- NJ(lx_dist)
lx_nj
plot(lx_nj, "unrooted")
```

On peut bien sûr artificiellement enraciner l'arbre, mais c'est rarement une bonne idée. C'est néanmoins parfois nécessaire pour visualiser un grand nombre de langues.

```{r}
plot(lx_nj, "tidy")
```

## NeighborNet

L'algorithme [NeighborNet](https://en.wikipedia.org/wiki/Neighbor-net) permet d'obtenir non pas un arbre mais un réseau qui montre notamment les conflits dans les données.

```{r}
lx_nn <- neighborNet(lx_dist)
lx_nn
```

```{r}
plot(lx_nn)
```

Ce réseau peut être sauvegardé au format nexus avec la fonction `write.nexus.networx()`.

```{r}
write.nexus.networx(lx_nn, "lx_nn.nex")
```
