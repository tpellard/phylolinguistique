# Import des données

## Lexiques comparatifs

La plupart des analyses phylolinguistiques utilisent des données lexicales. Une étape préalable à l'analyse phylogénétique consiste à déterminer quels mots sont cognats (homologues) et à les annoter. Cette tâche peut être grandement facilitée grâce à [Edictor](https://digling.org/edictor/), un éditeur libre et gratuit de bases de données lexicales comparatives créé par [Mattis List](https://lingulist.de). Il permet entre autres d'annoter facilement les groupes de cognats dans un navigateur internet en ligne ou hors ligne. Un [tutoriel en ligne](https://github.com/digling/edictor-tutorial) détaillé est disponible.

Edictor permet de sauvegarder les données traitées sous forme d'un fichier tabulaire au format [`.tsv`](https://fr.wikipedia.org/wiki/Tabulation-separated_values). Il est alors très simple de l'importer avec R, en prennant garde d'ignorer les lignes de commentaires à la fin marquées par `#`.

Téléchargeons et importons pour l'exemple des données sur les langues bai fournies dans Edictor.
```{r}
#| message: false
library(tidyverse)
url <- "https://raw.githubusercontent.com/digling/edictor/master/data/BAI.tsv"
download.file(url, "BAI.tsv")
lx <- read_tsv("BAI.tsv", comment = "#")
```

L'information sur les cognats se trouve dans la colonne `COGIDS`.
```{r}
#| echo: false
#| column: screen-inset
rmarkdown::paged_table(lx)
```

Comme il s'agit de faire un exemple et non une réelle analyse phylogénétique, je propose de renommer les langues de manière arbitraire afin de ne pas induire en erreur les personnes qui tomberaient par hasard sur les résultats de nos analyses et les diffuseraient sans leur contexte.

```{r}
lx <- lx %>% 
  mutate(DOCULECT = case_when(
    DOCULECT == "Gongxing" ~ "Magenta",
    DOCULECT == "Jinman" ~ "Cyan",
    DOCULECT == "Mazhelong" ~ "Jaune",
    DOCULECT == "Dashi" ~ "Vert",
    DOCULECT == "Zhoucheng" ~ "Violet",
    DOCULECT == "Jinxing" ~ "Orange",
    DOCULECT == "Tuolo" ~ "Rouge",
    DOCULECT == "Enqi" ~ "Bleu",
    DOCULECT == "Ega" ~ "Indigo",
  ))
```

Ce tableau au format long doit ensuite etre transforme au format large avec les langues (taxons) en colonnes et les mots (caracteres) en lignes. Il est preferable de produire une matrice avec des caracteres binaires (la langue possede-t-elle (1) ou non (0) un cognat) plutot qu'avec des caracteres a etats multiples (quelle est la classe de cognat du mot de chaque langue). Cela permet de traiter plus facilement les cas de polymorphismes (plusieurs formes pour un meme concept). Il faut donc transposer la colonne `COGIDS` en lignes et non la colonne `CONCEPT`. Comme certaines langues ont plusieurs formes (variantes?) pour une meme classe de cognat, mais l'information qui nous interesse est la presence ou non d'un cognat. Quand il n'y a pas de cognat dans une langue pour un `COGIDS` donne, on insere un `0`, et sinon on triche un peu pour obtenir un `1`.

```{r}
#| message: false
#| warning: false
lx_m <- lx %>% 
  select(CONCEPT, DOCULECT, COGIDS) %>%
  distinct() %>%
  pivot_wider(names_from = DOCULECT, values_from = CONCEPT, values_fill = 0, values_fn = length) %>% 
  select(-COGIDS)
```

```{r}
#| echo: false
#| column: screen-inset
rmarkdown::paged_table(lx_m)
```

Il suffit enfin d'utiliser la fonction `phyDat()` de `phangorn` en précisant l'ensemble des valeurs possibles de `COGIDS` et le nom des colonnes (langues) pour convertir notre matrice au format requis pour les analyses phylogénétiques.

```{r}
#| message: false
#| warning: false
library(phangorn)
lx_phy <- phyDat(lx_m, type = "USER", levels = 0:1, names = names(lx_m))
lx_phy
```

## Autres types de données

Dans le case de matrices de traits phylogénétiques déjà préparées il suffit d'importer le fichier

Pour les fichiers d'arbre au format nexus